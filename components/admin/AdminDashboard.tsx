
import React, { useState, useEffect } from 'react';
import AdminAnnouncements from './AdminAnnouncements';
import AdminDocuments from './AdminDocuments';
import AdminCertificates from './AdminCertificates';
import AdminStudentProfiles from './AdminStudentProfiles';
import AdminFormSettings from './AdminFormSettings';
import MobileMenu from '../shared/MobileMenu';
import TrashIcon from '../icons/TrashIcon';
import { StudentResult } from '../../types';

type Tab = 'announcements' | 'documents' | 'certificates' | 'profiles' | 'students' | 'form-settings';

interface User {
    id: string;
    exam_no: string;
    email: string;
    name: string;
    role: string;
    phone_last4: string;
    created_at: string;
    updated_at: string;
}

const AdminDashboard: React.FC = () => {
    const [activeTab, setActiveTab] = useState<Tab>('announcements');
    const [dbStatus, setDbStatus] = useState<string>('');
    const [uploadStatus, setUploadStatus] = useState<string>('');
    const [uploadResults, setUploadResults] = useState<any>(null);
    const [isUploading, setIsUploading] = useState(false);
    const [users, setUsers] = useState<User[]>([]);
    const [loadingUsers, setLoadingUsers] = useState(false);
    const [deleteStatus, setDeleteStatus] = useState<string>('');
    const [excelUploadStatus, setExcelUploadStatus] = useState<string>('');
    const [excelUploadResults, setExcelUploadResults] = useState<any>(null);
    const [isExcelUploading, setIsExcelUploading] = useState(false);
    const [personalResults, setPersonalResults] = useState<any[]>([]);
    const [loadingPersonalResults, setLoadingPersonalResults] = useState(false);
    const [deletePersonalResultStatus, setDeletePersonalResultStatus] = useState<string>('');
    const [searchTerm, setSearchTerm] = useState<string>('');
    const [filterType, setFilterType] = useState<string>('all');
    const [sortBy, setSortBy] = useState<string>('exam_no');
    const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
    const [userSearchTerm, setUserSearchTerm] = useState<string>('');
    const [userFilterType, setUserFilterType] = useState<string>('all');
    const [userSortBy, setUserSortBy] = useState<string>('exam_no');
    const [userSortOrder, setUserSortOrder] = useState<'asc' | 'desc'>('asc');
    
    // ÂÄã‰∫∫ÁµêÊûúÁ∑®ÈõÜÁî®„ÅÆÁä∂ÊÖã
    const [editingResult, setEditingResult] = useState<StudentResult | null>(null);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [editLoading, setEditLoading] = useState(false);

    const tabs = [
        { 
            id: 'announcements', 
            name: '„ÅäÁü•„Çâ„ÅõÁÆ°ÁêÜ', 
            icon: 'üì¢',
            component: AdminAnnouncements 
        },
        { 
            id: 'documents', 
            name: 'Êõ∏È°ûÁÆ°ÁêÜ', 
            icon: 'üìÑ',
            component: AdminDocuments 
        },
        { 
            id: 'certificates', 
            name: 'ÂêàÊ†ºË®ºÊõ∏ÁÆ°ÁêÜ', 
            icon: 'üèÜ',
            component: AdminCertificates 
        },
        { 
            id: 'profiles', 
            name: 'Â≠¶ÁîüÊÉÖÂ†±ÁÆ°ÁêÜ', 
            icon: 'üë•',
            component: AdminStudentProfiles 
        },
        { 
            id: 'students', 
            name: 'Â≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÁÆ°ÁêÜ', 
            icon: 'üë®‚Äçüéì',
            component: null 
        },
        { 
            id: 'form-settings', 
            name: '„Éï„Ç©„Éº„É†Ë®≠ÂÆöÁÆ°ÁêÜ', 
            icon: '‚öôÔ∏è',
            component: AdminFormSettings 
        },
    ];

    const ActiveComponent = tabs.find(tab => tab.id === activeTab)?.component || AdminAnnouncements;

    // „É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„ÇíÂèñÂæó
    const fetchUsers = async () => {
        setLoadingUsers(true);
        try {
            const response = await fetch('/api/users');
            const data = await response.json();
            if (data.success) {
                setUsers(data.users);
            } else {
                console.error('Failed to fetch users:', data.error);
            }
        } catch (error) {
            console.error('Error fetching users:', error);
        } finally {
            setLoadingUsers(false);
        }
    };

    // „É¶„Éº„Ç∂„ÉºÂâäÈô§
    const deleteUser = async (examNo: string) => {
        if (!confirm(`„Ç¢„Ç´„Ç¶„É≥„Éà ${examNo} „ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ`)) {
            return;
        }

        setDeleteStatus('ÂâäÈô§‰∏≠...');
        try {
            const response = await fetch(`/api/users/${examNo}`, {
                method: 'DELETE',
            });

            const data = await response.json();

            if (response.ok) {
                setDeleteStatus('ÂâäÈô§ÂÆå‰∫Ü');
                // „É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„ÇíÂÜçÂèñÂæó
                await fetchUsers();
                setTimeout(() => setDeleteStatus(''), 3000);
            } else {
                setDeleteStatus(`„Ç®„É©„Éº: ${data.error}`);
                setTimeout(() => setDeleteStatus(''), 5000);
            }
        } catch (error) {
            setDeleteStatus('ÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
            setTimeout(() => setDeleteStatus(''), 5000);
        }
    };

    // „Çø„Éñ„ÅåÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÁÆ°ÁêÜ„Å´Âàá„ÇäÊõø„Çè„Å£„ÅüÊôÇ„Å´„É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„ÇíÂèñÂæó
    useEffect(() => {
        if (activeTab === 'students') {
            fetchUsers();
            fetchPersonalResults();
        }
    }, [activeTab]);

    // ÂÄã‰∫∫ÁµêÊûú‰∏ÄË¶ß„ÇíÂèñÂæó
    const fetchPersonalResults = async () => {
        setLoadingPersonalResults(true);
        try {
            const response = await fetch('/api/results');
            const data = await response.json();
            if (data.success) {
                setPersonalResults(data.results);
            } else {
                console.error('Failed to fetch personal results:', data.error);
            }
        } catch (error) {
            console.error('Error fetching personal results:', error);
        } finally {
            setLoadingPersonalResults(false);
        }
    };

    // ÂÄã‰∫∫ÁµêÊûúÂâäÈô§
    const deletePersonalResult = async (examNo: string) => {
        if (!confirm(`ÂÄã‰∫∫ÁµêÊûú ${examNo} „ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ`)) {
            return;
        }

        setDeletePersonalResultStatus('ÂâäÈô§‰∏≠...');
        try {
            const response = await fetch(`/api/results/${examNo}`, {
                method: 'DELETE',
            });

            const data = await response.json();

            if (response.ok) {
                setDeletePersonalResultStatus('ÂâäÈô§ÂÆå‰∫Ü');
                // ÂÄã‰∫∫ÁµêÊûú‰∏ÄË¶ß„ÇíÂÜçÂèñÂæó
                await fetchPersonalResults();
                setTimeout(() => setDeletePersonalResultStatus(''), 3000);
            } else {
                setDeletePersonalResultStatus(`„Ç®„É©„Éº: ${data.error}`);
                setTimeout(() => setDeletePersonalResultStatus(''), 5000);
            }
        } catch (error) {
            setDeletePersonalResultStatus('ÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
            setTimeout(() => setDeletePersonalResultStatus(''), 5000);
        }
    };

    // ÂÖ®ÂÄã‰∫∫ÁµêÊûúÂâäÈô§
    const deleteAllPersonalResults = async () => {
        if (!confirm('ÂÖ®„Å¶„ÅÆÂÄã‰∫∫ÁµêÊûú„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
            return;
        }

        setDeletePersonalResultStatus('ÂÖ®ÂâäÈô§‰∏≠...');
        try {
            const response = await fetch('/api/results', {
                method: 'DELETE',
            });

            const data = await response.json();

            if (response.ok) {
                setDeletePersonalResultStatus('ÂÖ®ÂâäÈô§ÂÆå‰∫Ü');
                // ÂÄã‰∫∫ÁµêÊûú‰∏ÄË¶ß„ÇíÂÜçÂèñÂæó
                await fetchPersonalResults();
                setTimeout(() => setDeletePersonalResultStatus(''), 3000);
            } else {
                setDeletePersonalResultStatus(`„Ç®„É©„Éº: ${data.error}`);
                setTimeout(() => setDeletePersonalResultStatus(''), 5000);
            }
        } catch (error) {
            setDeletePersonalResultStatus('ÂÖ®ÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
            setTimeout(() => setDeletePersonalResultStatus(''), 5000);
        }
    };

    // „Éï„Ç£„É´„Çø„Éº„Éª„ÇΩ„Éº„ÉàÊ©üËÉΩ
    const filteredAndSortedData = () => {
        let filteredData = [...personalResults];

        // Ê§úÁ¥¢„Éï„Ç£„É´„Çø„Éº
        if (searchTerm) {
            filteredData = filteredData.filter(item => 
                item.student_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                item.exam_no?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                item.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                item.middle_school?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                item.accepted_course?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                item.application_course?.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        // „Çø„Ç§„Éó„Éï„Ç£„É´„Çø„Éº
        if (filterType !== 'all') {
            filteredData = filteredData.filter(item => {
                switch (filterType) {
                    case 'senkan':
                        return item.application_type === 'Â∞ÇÈ°ò';
                    case 'heikan':
                        return item.application_type === '‰ΩµÈ°ò';
                    case 'accepted':
                        return item.accepted_course && item.accepted_course.trim() !== '' && 
                               (!item.application_course || item.accepted_course === item.application_course);
                    case 'mawashi':
                        return item.accepted_course && item.accepted_course.trim() !== '' && 
                               item.application_course && item.accepted_course !== item.application_course;
                    case 'rejected':
                        return !item.accepted_course && item.application_course && item.application_course.trim() !== '';
                    case 'no_result':
                        return !item.accepted_course && (!item.application_course || item.application_course.trim() === '');
                    default:
                        return true;
                }
            });
        }

        // „ÇΩ„Éº„Éà
        filteredData.sort((a, b) => {
            let aValue = a[sortBy] || '';
            let bValue = b[sortBy] || '';

            if (typeof aValue === 'string') aValue = aValue.toLowerCase();
            if (typeof bValue === 'string') bValue = bValue.toLowerCase();

            if (sortOrder === 'asc') {
                return aValue > bValue ? 1 : -1;
            } else {
                return aValue < bValue ? 1 : -1;
            }
        });

        return filteredData;
    };

    const handleSort = (field: string) => {
        if (sortBy === field) {
            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
        } else {
            setSortBy(field);
            setSortOrder('asc');
        }
    };

    // ÂÄã‰∫∫ÁµêÊûúÁ∑®ÈõÜÊ©üËÉΩ
    const openEditModal = (result: StudentResult) => {
        setEditingResult({ ...result });
        setIsEditModalOpen(true);
    };

    const closeEditModal = () => {
        setEditingResult(null);
        setIsEditModalOpen(false);
    };

    const handleEditSubmit = async () => {
        if (!editingResult) return;

        setEditLoading(true);
        try {
            const response = await fetch(`/api/results/${editingResult.exam_no}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(editingResult),
            });

            if (response.ok) {
                // ÂÄã‰∫∫ÁµêÊûú‰∏ÄË¶ß„ÇíÂÜçÂèñÂæó
                await fetchPersonalResults();
                closeEditModal();
            } else {
                const data = await response.json();
                alert(`Êõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${data.error}`);
            }
        } catch (error) {
            alert('Êõ¥Êñ∞‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        } finally {
            setEditLoading(false);
        }
    };

    const handleEditChange = (field: keyof StudentResult, value: string) => {
        if (!editingResult) return;
        setEditingResult(prev => ({
            ...prev!,
            [field]: value
        }));
    };

    // Â≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÁÆ°ÁêÜ„ÅÆ„Éï„Ç£„É´„Çø„Éº„Éª„ÇΩ„Éº„ÉàÊ©üËÉΩ
    const filteredAndSortedUsers = () => {
        let filteredData = [...users];

        // Ê§úÁ¥¢„Éï„Ç£„É´„Çø„Éº
        if (userSearchTerm) {
            filteredData = filteredData.filter(item => 
                item.exam_no?.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                item.name?.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                item.email?.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                item.phone_last4?.toLowerCase().includes(userSearchTerm.toLowerCase())
            );
        }

        // „Çø„Ç§„Éó„Éï„Ç£„É´„Çø„Éº
        if (userFilterType !== 'all') {
            filteredData = filteredData.filter(item => {
                switch (userFilterType) {
                    case 'admin':
                        return item.role === 'admin';
                    case 'student':
                        return item.role === 'student';
                    case 'has_phone':
                        return item.phone_last4 && item.phone_last4.trim() !== '';
                    case 'no_phone':
                        return !item.phone_last4 || item.phone_last4.trim() === '';
                    default:
                        return true;
                }
            });
        }

        // „ÇΩ„Éº„Éà
        filteredData.sort((a, b) => {
            let aValue = a[userSortBy as keyof User] || '';
            let bValue = b[userSortBy as keyof User] || '';

            if (typeof aValue === 'string') aValue = aValue.toLowerCase();
            if (typeof bValue === 'string') bValue = bValue.toLowerCase();

            if (userSortOrder === 'asc') {
                return aValue > bValue ? 1 : -1;
            } else {
                return aValue < bValue ? 1 : -1;
            }
        });

        return filteredData;
    };

    const handleUserSort = (field: string) => {
        if (userSortBy === field) {
            setUserSortOrder(userSortOrder === 'asc' ? 'desc' : 'asc');
        } else {
            setUserSortBy(field);
            setUserSortOrder('asc');
        }
    };

    // „Ç®„ÇØ„Çª„É´„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
    const handleExcelUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        setIsExcelUploading(true);
        setExcelUploadStatus('');
        setExcelUploadResults(null);

        try {
            const formData = new FormData();
            formData.append('file', file);

            const response = await fetch('/api/upload-results', {
                method: 'POST',
                body: formData,
            });

            const data = await response.json();

            if (response.ok) {
                setExcelUploadStatus('„Ç®„ÇØ„Çª„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü');
                setExcelUploadResults(data);
                // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫ÜÂæå„Å´ÂÄã‰∫∫ÁµêÊûú‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
                await fetchPersonalResults();
            } else {
                setExcelUploadStatus(`„Ç®„É©„Éº: ${data.error}`);
            }
        } catch (error) {
            setExcelUploadStatus('„Ç®„ÇØ„Çª„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        } finally {
            setIsExcelUploading(false);
        }
    };

    const testDatabase = async () => {
        setDbStatus('„ÉÜ„Çπ„Éà‰∏≠...');
        try {
            const response = await fetch('/api/db-test');
            const data = await response.json();
            setDbStatus(data.message);
        } catch (error) {
            setDbStatus('„Ç®„É©„Éº: „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
    };

    const initDatabase = async () => {
        setDbStatus('ÂàùÊúüÂåñ‰∏≠...');
        try {
            const response = await fetch('/api/init', { method: 'POST' });
            const data = await response.json();
            setDbStatus(data.message);
        } catch (error) {
            setDbStatus('„Ç®„É©„Éº: „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
    };

    const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        setIsUploading(true);
        setUploadStatus('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...');
        setUploadResults(null);

        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch('/api/upload-students', {
                method: 'POST',
                body: formData,
            });

            const data = await response.json();

            if (response.ok) {
                setUploadStatus('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü');
                setUploadResults(data);
                // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫ÜÂæå„Å´„É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
                await fetchUsers();
            } else {
                setUploadStatus(`„Ç®„É©„Éº: ${data.error}`);
            }
        } catch (error) {
            setUploadStatus('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        } finally {
            setIsUploading(false);
        }
    };

    const StudentAccountManagement = () => (
        <div className="p-4 sm:p-6">
            <div className="mb-6">
                <h2 className="text-xl font-bold text-gray-900 sm:text-2xl">Â≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÁÆ°ÁêÜ</h2>
                <p className="mt-1 text-sm text-gray-600">CSV„Éï„Ç°„Ç§„É´„ÅßÂ≠¶Áîü„ÅÆ„É≠„Ç∞„Ç§„É≥ÊÉÖÂ†±„Çí‰∏ÄÊã¨ÁôªÈå≤„ÉªÊõ¥Êñ∞</p>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="mb-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">CSV„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ</h3>
                    
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                        <h4 className="font-medium text-blue-900 mb-2">CSV„Éï„Ç°„Ç§„É´ÂΩ¢Âºè</h4>
                        <div className="text-sm text-blue-800 space-y-1">
                            <p>‚Ä¢ AÂàó: ÂèóÈ®ìÁï™Âè∑Ôºà4Ê°Å„ÅÆÊï∞Â≠óÔºâ</p>
                            <p>‚Ä¢ BÂàó: ÈõªË©±Áï™Âè∑</p>
                            <p>‚Ä¢ 1Ë°åÁõÆ„ÅØ„Éò„ÉÉ„ÉÄ„ÉºË°å„Å®„Åó„Å¶Êâ±„Çè„Çå„Åæ„Åô</p>
                            <p>‚Ä¢ „É≠„Ç∞„Ç§„É≥ID: ÂèóÈ®ìÁï™Âè∑„Åù„ÅÆ„Åæ„Åæ</p>
                            <p>‚Ä¢ „Éë„Çπ„ÉØ„Éº„Éâ: ÈõªË©±Áï™Âè∑„ÅÆ‰∏ã4Ê°Å</p>
                        </div>
                    </div>

                    <div className="flex items-center space-x-4">
                        <label className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer">
                            <input
                                type="file"
                                accept=".csv"
                                onChange={handleFileUpload}
                                disabled={isUploading}
                                className="hidden"
                            />
                            {isUploading ? '„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...' : 'CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû'}
                        </label>
                        
                        {isUploading && (
                            <div className="flex items-center">
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                                <span className="ml-2 text-sm text-gray-600">Âá¶ÁêÜ‰∏≠...</span>
                            </div>
                        )}
                    </div>
                </div>

                {uploadStatus && (
                    <div className={`p-4 rounded-lg border ${
                        uploadStatus.includes('„Ç®„É©„Éº') 
                            ? 'bg-red-50 border-red-200 text-red-800' 
                            : 'bg-green-50 border-green-200 text-green-800'
                    }`}>
                        <p className="font-medium">{uploadStatus}</p>
                    </div>
                )}

                {uploadResults && (
                    <div className="mt-6">
                        <h4 className="font-medium text-gray-900 mb-3">Âá¶ÁêÜÁµêÊûú</h4>
                        
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                            <div className="bg-gray-50 p-3 rounded-lg">
                                <p className="text-sm text-gray-600">Á∑è‰ª∂Êï∞</p>
                                <p className="text-lg font-semibold">{uploadResults.summary.total}</p>
                            </div>
                            <div className="bg-green-50 p-3 rounded-lg">
                                <p className="text-sm text-green-600">ÊàêÂäü</p>
                                <p className="text-lg font-semibold text-green-700">{uploadResults.summary.success}</p>
                            </div>
                            <div className="bg-red-50 p-3 rounded-lg">
                                <p className="text-sm text-red-600">„Ç®„É©„Éº</p>
                                <p className="text-lg font-semibold text-red-700">{uploadResults.summary.errors}</p>
                            </div>
                        </div>

                        {uploadResults.errors.length > 0 && (
                            <div className="mt-4">
                                <h5 className="font-medium text-red-700 mb-2">„Ç®„É©„ÉºË©≥Á¥∞</h5>
                                <div className="bg-red-50 border border-red-200 rounded-lg p-3 max-h-40 overflow-y-auto">
                                    {uploadResults.errors.map((error: string, index: number) => (
                                        <p key={index} className="text-sm text-red-700 mb-1">{error}</p>
                                    ))}
                                </div>
                            </div>
                        )}

                        {uploadResults.results.length > 0 && (
                            <div className="mt-4">
                                <h5 className="font-medium text-green-700 mb-2">ÊàêÂäü„Åó„ÅüÂá¶ÁêÜ</h5>
                                <div className="bg-green-50 border border-green-200 rounded-lg p-3 max-h-40 overflow-y-auto">
                                    {uploadResults.results.slice(0, 10).map((result: string, index: number) => (
                                        <p key={index} className="text-sm text-green-700 mb-1">{result}</p>
                                    ))}
                                    {uploadResults.results.length > 10 && (
                                        <p className="text-sm text-green-600">... ‰ªñ {uploadResults.results.length - 10}‰ª∂</p>
                                    )}
                                </div>
                            </div>
                        )}
                    </div>
                )}
            </div>
        </div>
    );

    return (
        <div className="min-h-screen bg-gray-50">
            {/* „É¢„Éê„Ç§„É´Áî®„Éò„ÉÉ„ÉÄ„Éº */}
            <div className="bg-white shadow-sm border-b border-gray-200 px-4 py-4 md:hidden">
                <div className="flex items-center justify-between">
                    <h1 className="text-lg font-semibold text-gray-900">ÁÆ°ÁêÜËÄÖ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</h1>
                    <div className="text-sm text-gray-500">
                        {tabs.find(tab => tab.id === activeTab)?.name}
                    </div>
                </div>
            </div>

            {/* „Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóÁî®„Çø„Éñ */}
            <div className="hidden md:block border-b border-gray-200 bg-white">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <nav className="-mb-px flex space-x-8">
                        {tabs.map((tab) => (
                            <button
                                key={tab.id}
                                onClick={() => setActiveTab(tab.id as Tab)}
                                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                                    activeTab === tab.id
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                }`}
                            >
                                {tab.name}
                            </button>
                        ))}
                    </nav>
                </div>
            </div>

            {/* „Éè„É≥„Éê„Éº„Ç¨„Éº„É°„Éã„É•„Éº */}
            <MobileMenu 
                tabs={tabs}
                activeTab={activeTab}
                onTabChange={(tabId) => setActiveTab(tabId as Tab)}
            />

            {/* „Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„Éú„Çø„É≥Ôºà„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„ÅÆ„ÅøÔºâ */}
            <div className="hidden md:block max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-4">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">„Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ</h3>
                    <div className="flex space-x-4">
                        <button
                            onClick={testDatabase}
                            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            DBÊé•Á∂ö„ÉÜ„Çπ„Éà
                        </button>
                        <button
                            onClick={initDatabase}
                            className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
                        >
                            DBÂàùÊúüÂåñ
                        </button>
                    </div>
                    {dbStatus && (
                        <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                            <p className="text-sm text-gray-700">{dbStatus}</p>
                        </div>
                    )}
                </div>
            </div>

            {/* „Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ */}
            <div className="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
                <div className="bg-white rounded-lg shadow-sm border border-gray-200">
                    {activeTab === 'students' ? (
                        <div className="p-4 sm:p-6">
                            <div className="mb-6">
                                <h2 className="text-xl font-bold text-gray-900 sm:text-2xl">Â≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÁÆ°ÁêÜ</h2>
                                <p className="mt-1 text-sm text-gray-600">CSV„Éï„Ç°„Ç§„É´„ÅßÂ≠¶Áîü„ÅÆ„É≠„Ç∞„Ç§„É≥ÊÉÖÂ†±„Çí‰∏ÄÊã¨ÁôªÈå≤„ÉªÊõ¥Êñ∞</p>
                            </div>

                            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                                <div className="mb-6">
                                    <h3 className="text-lg font-semibold text-gray-900 mb-4">CSV„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÔºâ</h3>
                                    
                                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                                        <h4 className="font-medium text-blue-900 mb-2">CSV„Éï„Ç°„Ç§„É´ÂΩ¢Âºè</h4>
                                        <div className="text-sm text-blue-800 space-y-1">
                                            <p>‚Ä¢ AÂàó: ÂèóÈ®ìÁï™Âè∑Ôºà4Ê°Å„ÅÆÊï∞Â≠óÔºâ</p>
                                            <p>‚Ä¢ BÂàó: ÈõªË©±Áï™Âè∑</p>
                                            <p>‚Ä¢ 1Ë°åÁõÆ„ÅØ„Éò„ÉÉ„ÉÄ„ÉºË°å„Å®„Åó„Å¶Êâ±„Çè„Çå„Åæ„Åô</p>
                                            <p>‚Ä¢ „É≠„Ç∞„Ç§„É≥ID: ÂèóÈ®ìÁï™Âè∑„Åù„ÅÆ„Åæ„Åæ</p>
                                            <p>‚Ä¢ „Éë„Çπ„ÉØ„Éº„Éâ: ÈõªË©±Áï™Âè∑„ÅÆ‰∏ã4Ê°Å</p>
                                        </div>
                                    </div>

                                    <div className="flex items-center space-x-4">
                                        <label className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer">
                                            <input
                                                type="file"
                                                accept=".csv"
                                                onChange={handleFileUpload}
                                                disabled={isUploading}
                                                className="hidden"
                                            />
                                            {isUploading ? '„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...' : 'CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû'}
                                        </label>
                                        
                                        {isUploading && (
                                            <div className="flex items-center">
                                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                                                <span className="ml-2 text-sm text-gray-600">Âá¶ÁêÜ‰∏≠...</span>
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {uploadStatus && (
                                    <div className={`p-4 rounded-lg border ${
                                        uploadStatus.includes('„Ç®„É©„Éº') 
                                            ? 'bg-red-50 border-red-200 text-red-800' 
                                            : 'bg-green-50 border-green-200 text-green-800'
                                    }`}>
                                        <p className="font-medium">{uploadStatus}</p>
                                    </div>
                                )}

                                {uploadResults && (
                                    <div className="mt-6">
                                        <h4 className="font-medium text-gray-900 mb-3">Âá¶ÁêÜÁµêÊûú</h4>
                                        
                                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                            <div className="bg-gray-50 p-3 rounded-lg">
                                                <p className="text-sm text-gray-600">Á∑è‰ª∂Êï∞</p>
                                                <p className="text-lg font-semibold">{uploadResults.summary.total}</p>
                                            </div>
                                            <div className="bg-green-50 p-3 rounded-lg">
                                                <p className="text-sm text-green-600">ÊàêÂäü</p>
                                                <p className="text-lg font-semibold text-green-700">{uploadResults.summary.success}</p>
                                            </div>
                                            <div className="bg-red-50 p-3 rounded-lg">
                                                <p className="text-sm text-red-600">„Ç®„É©„Éº</p>
                                                <p className="text-lg font-semibold text-red-700">{uploadResults.summary.errors}</p>
                                            </div>
                                        </div>

                                        {uploadResults.errors.length > 0 && (
                                            <div className="mt-4">
                                                <h5 className="font-medium text-red-700 mb-2">„Ç®„É©„ÉºË©≥Á¥∞</h5>
                                                <div className="bg-red-50 border border-red-200 rounded-lg p-3 max-h-40 overflow-y-auto">
                                                    {uploadResults.errors.map((error: string, index: number) => (
                                                        <p key={index} className="text-sm text-red-700 mb-1">{error}</p>
                                                    ))}
                                                </div>
                                            </div>
                                        )}

                                        {uploadResults.results.length > 0 && (
                                            <div className="mt-4">
                                                <h5 className="font-medium text-green-700 mb-2">ÊàêÂäü„Åó„ÅüÂá¶ÁêÜ</h5>
                                                <div className="bg-green-50 border border-green-200 rounded-lg p-3 max-h-40 overflow-y-auto">
                                                    {uploadResults.results.slice(0, 10).map((result: string, index: number) => (
                                                        <p key={index} className="text-sm text-green-700 mb-1">{result}</p>
                                                    ))}
                                                    {uploadResults.results.length > 10 && (
                                                        <p className="text-sm text-green-600">... ‰ªñ {uploadResults.results.length - 10}‰ª∂</p>
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>

                            {/* „Ç®„ÇØ„Çª„É´„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàÂÄã‰∫∫ÁµêÊûúÔºâ */}
                            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mt-6">
                                <div className="mb-6">
                                    <h3 className="text-lg font-semibold text-gray-900 mb-4">„Ç®„ÇØ„Çª„É´„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàÂÄã‰∫∫ÁµêÊûúÔºâ</h3>
                                    
                                    <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                                        <h4 className="font-medium text-green-900 mb-2">„Ç®„ÇØ„Çª„É´„Éï„Ç°„Ç§„É´ÂΩ¢Âºè</h4>
                                        <div className="text-sm text-green-800 space-y-1">
                                            <p>‚Ä¢ AÂàó: Â≠¶ÁîüID</p>
                                            <p>‚Ä¢ BÂàó: ÂèóÈ®ìÁï™Âè∑</p>
                                            <p>‚Ä¢ CÂàó: Ê∞èÂêç</p>
                                            <p>‚Ä¢ EÂàó: ÊÄßÂà•</p>
                                            <p>‚Ä¢ GÂàó: Âá∫È°òÊôÇ„ÅÆ„Ç≥„Éº„Çπ</p>
                                            <p>‚Ä¢ HÂàó: Âá∫È°òÁ®ÆÂà•ÔºàÂ∞ÇÈ°ò/‰ΩµÈ°òÔºâ</p>
                                            <p>‚Ä¢ JÂàó: Êé®Ëñ¶</p>
                                            <p>‚Ä¢ MÂàó: ‰∏≠Â≠¶Ê†°Âêç</p>
                                            <p>‚Ä¢ OÂàó: 3ÊïôÁßë‰∏ä‰Ωç10%</p>
                                            <p>‚Ä¢ PÂàó: ÁâπÈÄ≤‰∏ä‰Ωç5Âêç</p>
                                            <p>‚Ä¢ QÂàó: ÈÄ≤Â≠¶‰∏ä‰Ωç5Âêç</p>
                                            <p>‚Ä¢ RÂàó: ÈÉ®Ê¥ªÂãïÊé®Ëñ¶ÂÖ•Â≠¶ÈáëÂÖçÈô§</p>
                                            <p>‚Ä¢ SÂàó: ÈÉ®Ê¥ªÂãïÊé®Ëñ¶Ë´∏Ë≤ªÁî®ÂÖçÈô§</p>
                                            <p>‚Ä¢ TÂàó: ÈÉ®Ê¥ªÂãïÊé®Ëñ¶Â•®Â≠¶ÈáëÊîØÁµ¶</p>
                                            <p>‚Ä¢ VÂàó: ÂêàÊ†º„Ç≥„Éº„Çπ</p>
                                            <p>‚Ä¢ XÂàó: ÁâπÂæÖÁîü</p>
                                            <p>‚Ä¢ ZÂàó: ÈÉ®Ê¥ªÂãïÊé®Ëñ¶Ë°®Ë®ò</p>
                                        </div>
                                    </div>

                                    <div className="flex items-center space-x-4">
                                        <label className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors cursor-pointer">
                                            <input
                                                type="file"
                                                accept=".xlsx,.xls"
                                                onChange={handleExcelUpload}
                                                disabled={isExcelUploading}
                                                className="hidden"
                                            />
                                            {isExcelUploading ? '„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...' : '„Ç®„ÇØ„Çª„É´„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû'}
                                        </label>
                                        
                                        {isExcelUploading && (
                                            <div className="flex items-center">
                                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600"></div>
                                                <span className="ml-2 text-sm text-gray-600">Âá¶ÁêÜ‰∏≠...</span>
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {excelUploadStatus && (
                                    <div className={`p-4 rounded-lg border ${
                                        excelUploadStatus.includes('„Ç®„É©„Éº') 
                                            ? 'bg-red-50 border-red-200 text-red-800' 
                                            : 'bg-green-50 border-green-200 text-green-800'
                                    }`}>
                                        <p className="font-medium">{excelUploadStatus}</p>
                                    </div>
                                )}

                                {excelUploadResults && (
                                    <div className="mt-6">
                                        <h4 className="font-medium text-gray-900 mb-3">Âá¶ÁêÜÁµêÊûú</h4>
                                        
                                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                            <div className="bg-gray-50 p-3 rounded-lg">
                                                <p className="text-sm text-gray-600">Á∑è‰ª∂Êï∞</p>
                                                <p className="text-lg font-semibold">{excelUploadResults.summary.total}</p>
                                            </div>
                                            <div className="bg-green-50 p-3 rounded-lg">
                                                <p className="text-sm text-green-600">ÊàêÂäü</p>
                                                <p className="text-lg font-semibold text-green-700">{excelUploadResults.summary.processed}</p>
                                            </div>
                                            <div className="bg-red-50 p-3 rounded-lg">
                                                <p className="text-sm text-red-600">„Ç®„É©„Éº</p>
                                                <p className="text-lg font-semibold text-red-700">{excelUploadResults.summary.errors}</p>
                                            </div>
                                        </div>

                                        {excelUploadResults.errors.length > 0 && (
                                            <div className="mt-4">
                                                <h5 className="font-medium text-red-700 mb-2">„Ç®„É©„ÉºË©≥Á¥∞</h5>
                                                <div className="bg-red-50 border border-red-200 rounded-lg p-3 max-h-40 overflow-y-auto">
                                                    {excelUploadResults.errors.map((error: string, index: number) => (
                                                        <p key={index} className="text-sm text-red-700 mb-1">{error}</p>
                                                    ))}
                                                </div>
                                            </div>
                                        )}

                                        {excelUploadResults.results.length > 0 && (
                                            <div className="mt-4">
                                                <h5 className="font-medium text-green-700 mb-2">ÊàêÂäü„Åó„ÅüÂá¶ÁêÜ</h5>
                                                <div className="bg-green-50 border border-green-200 rounded-lg p-3 max-h-40 overflow-y-auto">
                                                    {excelUploadResults.results.slice(0, 10).map((result: string, index: number) => (
                                                        <p key={index} className="text-sm text-green-700 mb-1">{result}</p>
                                                    ))}
                                                    {excelUploadResults.results.length > 10 && (
                                                        <p className="text-sm text-green-600">... ‰ªñ {excelUploadResults.results.length - 10}‰ª∂</p>
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>

                            {/* ÂÄã‰∫∫ÁµêÊûúÁÆ°ÁêÜ */}
                            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mt-6">
                                <div className="flex items-center justify-between mb-6">
                                    <h3 className="text-lg font-semibold text-gray-900">ÂÄã‰∫∫ÁµêÊûúÁÆ°ÁêÜ</h3>
                                    <button
                                        onClick={deleteAllPersonalResults}
                                        className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
                                    >
                                        ÂÖ®ÂâäÈô§
                                    </button>
                                </div>

                                {/* Ê§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„Éº„Éª„ÇΩ„Éº„Éà */}
                                <div className="mb-6 space-y-4">
                                    {/* Ê§úÁ¥¢„Éê„Éº */}
                                    <div className="flex items-center space-x-4">
                                        <div className="flex-1">
                                            <input
                                                type="text"
                                                placeholder="Â≠¶ÁîüID„ÄÅÂèóÈ®ìÁï™Âè∑„ÄÅÊ∞èÂêç„ÄÅ‰∏≠Â≠¶Ê†°Âêç„ÄÅÂêàÊ†ºÁµêÊûú„ÅßÊ§úÁ¥¢..."
                                                value={searchTerm}
                                                onChange={(e) => setSearchTerm(e.target.value)}
                                                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                            />
                                        </div>
                                        <button
                                            onClick={() => setSearchTerm('')}
                                            className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                                        >
                                            „ÇØ„É™„Ç¢
                                        </button>
                                    </div>

                                    {/* „Éï„Ç£„É´„Çø„Éº„Éª„ÇΩ„Éº„Éà */}
                                    <div className="flex flex-wrap items-center gap-4">
                                        {/* „Éï„Ç£„É´„Çø„Éº */}
                                        <div className="flex items-center space-x-2">
                                            <label className="text-sm font-medium text-gray-700">„Éï„Ç£„É´„Çø„Éº:</label>
                                            <select
                                                value={filterType}
                                                onChange={(e) => setFilterType(e.target.value)}
                                                className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            >
                                                <option value="all">ÂÖ®„Å¶</option>
                                                <option value="senkan">Â∞ÇÈ°ò„ÅÆ„Åø</option>
                                                <option value="heikan">‰ΩµÈ°ò„ÅÆ„Åø</option>
                                                <option value="accepted">ÂêàÊ†ºËÄÖ</option>
                                                <option value="mawashi">Âªª„ÅóÂêàÊ†ºËÄÖ</option>
                                                <option value="rejected">‰∏çÂêàÊ†ºËÄÖ</option>
                                                <option value="no_result">ÁµêÊûúÊú™Áô∫Ë°®</option>
                                            </select>
                                        </div>

                                        {/* „ÇΩ„Éº„Éà */}
                                        <div className="flex items-center space-x-2">
                                            <label className="text-sm font-medium text-gray-700">„ÇΩ„Éº„Éà:</label>
                                            <select
                                                value={sortBy}
                                                onChange={(e) => setSortBy(e.target.value)}
                                                className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            >
                                                <option value="student_id">Â≠¶ÁîüID</option>
                                                <option value="exam_no">ÂèóÈ®ìÁï™Âè∑</option>
                                                <option value="name">Ê∞èÂêç</option>
                                                <option value="application_type">Âá∫È°òÁ®ÆÂà•</option>
                                                <option value="application_course">Âá∫È°òÊôÇ„Ç≥„Éº„Çπ</option>
                                                <option value="accepted_course">ÂêàÊ†ºÁµêÊûú</option>
                                                <option value="created_at">‰ΩúÊàêÊó•ÊôÇ</option>
                                            </select>
                                            <button
                                                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                                                className="px-2 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded transition-colors"
                                            >
                                                {sortOrder === 'asc' ? '‚Üë' : '‚Üì'}
                                            </button>
                                        </div>

                                        {/* ÁµêÊûú‰ª∂Êï∞ */}
                                        <div className="text-sm text-gray-600">
                                            Ë°®Á§∫: {filteredAndSortedData().length} / {personalResults.length}‰ª∂
                                        </div>
                                    </div>
                                </div>

                                {deletePersonalResultStatus && (
                                    <div className={`mb-6 p-4 rounded-lg border ${
                                        deletePersonalResultStatus.includes('„Ç®„É©„Éº') 
                                            ? 'bg-red-50 border-red-200 text-red-800' 
                                            : 'bg-green-50 border-green-200 text-green-800'
                                    }`}>
                                        <p className="font-medium">{deletePersonalResultStatus}</p>
                                    </div>
                                )}

                                {loadingPersonalResults ? (
                                    <div className="text-center py-8">
                                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                                        <p className="mt-4 text-gray-600">ÂÄã‰∫∫ÁµêÊûú‰∏ÄË¶ß„ÇíË™≠„ÅøËæº„Åø‰∏≠...</p>
                                    </div>
                                ) : (
                                    <div className="overflow-x-auto">
                                        <table className="min-w-full divide-y divide-gray-200">
                                            <thead className="bg-gray-50">
                                                <tr>
                                                    <th 
                                                        scope="col" 
                                                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                        onClick={() => handleSort('student_id')}
                                                    >
                                                        Â≠¶ÁîüID {sortBy === 'student_id' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                                                    </th>
                                                    <th 
                                                        scope="col" 
                                                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                        onClick={() => handleSort('exam_no')}
                                                    >
                                                        ÂèóÈ®ìÁï™Âè∑ {sortBy === 'exam_no' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                                                    </th>
                                                    <th 
                                                        scope="col" 
                                                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                        onClick={() => handleSort('name')}
                                                    >
                                                        Ê∞èÂêç {sortBy === 'name' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                                                    </th>
                                                    <th 
                                                        scope="col" 
                                                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                        onClick={() => handleSort('application_type')}
                                                    >
                                                        Âá∫È°òÁ®ÆÂà• {sortBy === 'application_type' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                                                    </th>
                                                    <th 
                                                        scope="col" 
                                                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                        onClick={() => handleSort('application_course')}
                                                    >
                                                        Âá∫È°òÊôÇ„Ç≥„Éº„Çπ {sortBy === 'application_course' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ÊÄßÂà•
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ‰∏≠Â≠¶Ê†°Âêç
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Êé®Ëñ¶
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ÁâπÂæÖÁîü
                                                    </th>
                                                    <th 
                                                        scope="col" 
                                                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                        onClick={() => handleSort('accepted_course')}
                                                    >
                                                        ÂêàÊ†ºÁµêÊûú {sortBy === 'accepted_course' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                                                    </th>
                                                    <th 
                                                        scope="col" 
                                                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                                                        onClick={() => handleSort('created_at')}
                                                    >
                                                        ‰ΩúÊàêÊó•ÊôÇ {sortBy === 'created_at' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Á∑®ÈõÜ
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ÂâäÈô§
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody className="bg-white divide-y divide-gray-200">
                                                {filteredAndSortedData().map((result, index) => (
                                                    <tr key={result.id} className={`${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'} hover:bg-blue-50 transition-colors duration-150`}>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 bg-gray-50">
                                                            {result.student_id || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 bg-blue-50">
                                                            {result.exam_no}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                            {result.name || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {result.application_type ? (
                                                                <span className={`inline-block px-2 py-1 rounded text-xs font-bold text-white ${
                                                                    result.application_type === 'Â∞ÇÈ°ò' 
                                                                        ? 'bg-blue-600' 
                                                                        : 'bg-red-600'
                                                                }`}>
                                                                    {result.application_type}
                                                                </span>
                                                            ) : (
                                                                <span className="text-gray-500">-</span>
                                                            )}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {result.application_course || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {result.gender || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {result.middle_school || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {result.recommendation || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {result.scholarship_student || '-'}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {result.accepted_course ? (
                                                                result.application_course && result.accepted_course !== result.application_course ? (
                                                                    <span className="text-orange-600 font-medium">Âªª„ÅóÂêàÊ†º: {result.accepted_course}</span>
                                                                ) : (
                                                                    <span className="text-green-600 font-medium">{result.accepted_course}</span>
                                                                )
                                                            ) : result.application_course ? (
                                                                <span className="text-red-600 font-medium">‰∏çÂêàÊ†º</span>
                                                            ) : (
                                                                <span className="text-gray-500">-</span>
                                                            )}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {new Date(result.created_at).toLocaleDateString('ja-JP')}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            <button
                                                                onClick={() => openEditModal(result)}
                                                                className="text-blue-600 hover:text-blue-900 mr-2"
                                                                title="Á∑®ÈõÜ"
                                                            >
                                                                <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                                </svg>
                                                            </button>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            <button
                                                                onClick={() => deletePersonalResult(result.exam_no)}
                                                                className="text-red-600 hover:text-red-900"
                                                                title="ÂâäÈô§"
                                                            >
                                                                <TrashIcon className="h-5 w-5" />
                                                            </button>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                )}
                            </div>

                            {/* „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÁÆ°ÁêÜ */}
                            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mt-6">
                                <div className="flex items-center justify-between mb-6">
                                    <h3 className="text-lg font-semibold text-gray-900">„É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÁÆ°ÁêÜ</h3>
                                    <button
                                        onClick={() => setUserSearchTerm('')}
                                        className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                                    >
                                        „ÇØ„É™„Ç¢
                                    </button>
                                </div>

                                {/* Ê§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„Éº„Éª„ÇΩ„Éº„Éà */}
                                <div className="mb-6 space-y-4">
                                    {/* Ê§úÁ¥¢„Éê„Éº */}
                                    <div className="flex items-center space-x-4">
                                        <div className="flex-1">
                                            <input
                                                type="text"
                                                placeholder="ÂèóÈ®ìÁï™Âè∑„ÄÅÂêçÂâç„ÄÅ„É≠„Ç∞„Ç§„É≥ID„ÄÅÈõªË©±Áï™Âè∑„ÅßÊ§úÁ¥¢..."
                                                value={userSearchTerm}
                                                onChange={(e) => setUserSearchTerm(e.target.value)}
                                                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                            />
                                        </div>
                                        <button
                                            onClick={() => setUserSearchTerm('')}
                                            className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                                        >
                                            „ÇØ„É™„Ç¢
                                        </button>
                                    </div>

                                    {/* „Éï„Ç£„É´„Çø„Éº„Éª„ÇΩ„Éº„Éà */}
                                    <div className="flex flex-wrap items-center gap-4">
                                        {/* „Éï„Ç£„É´„Çø„Éº */}
                                        <div className="flex items-center space-x-2">
                                            <label className="text-sm font-medium text-gray-700">„Éï„Ç£„É´„Çø„Éº:</label>
                                            <select
                                                value={userFilterType}
                                                onChange={(e) => setUserFilterType(e.target.value)}
                                                className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            >
                                                <option value="all">ÂÖ®„Å¶</option>
                                                <option value="admin">ÁÆ°ÁêÜËÄÖ„ÅÆ„Åø</option>
                                                <option value="student">Â≠¶Áîü„ÅÆ„Åø</option>
                                                <option value="has_phone">ÈõªË©±Áï™Âè∑„ÅÇ„Çä</option>
                                                <option value="no_phone">ÈõªË©±Áï™Âè∑„Å™„Åó</option>
                                            </select>
                                        </div>

                                        {/* „ÇΩ„Éº„Éà */}
                                        <div className="flex items-center space-x-2">
                                            <label className="text-sm font-medium text-gray-700">„ÇΩ„Éº„Éà:</label>
                                            <select
                                                value={userSortBy}
                                                onChange={(e) => setUserSortBy(e.target.value)}
                                                className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            >
                                                <option value="exam_no">ÂèóÈ®ìÁï™Âè∑</option>
                                                <option value="name">ÂêçÂâç</option>
                                                <option value="email">„É≠„Ç∞„Ç§„É≥ID</option>
                                                <option value="phone_last4">ÈõªË©±Áï™Âè∑</option>
                                                <option value="role">„É≠„Éº„É´</option>
                                                <option value="created_at">‰ΩúÊàêÊó•ÊôÇ</option>
                                            </select>
                                            <button
                                                onClick={() => handleUserSort(userSortBy)}
                                                className="px-2 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded transition-colors"
                                            >
                                                {userSortOrder === 'asc' ? '‚Üë' : '‚Üì'}
                                            </button>
                                        </div>

                                        {/* ÁµêÊûú‰ª∂Êï∞ */}
                                        <div className="text-sm text-gray-600">
                                            Ë°®Á§∫: {filteredAndSortedUsers().length} / {users.length}‰ª∂
                                        </div>
                                    </div>
                                </div>

                                {deleteStatus && (
                                    <div className={`mt-6 p-4 rounded-lg border ${
                                        deleteStatus.includes('„Ç®„É©„Éº') 
                                            ? 'bg-red-50 border-red-200 text-red-800' 
                                            : 'bg-green-50 border-green-200 text-green-800'
                                    }`}>
                                        <p className="font-medium">{deleteStatus}</p>
                                    </div>
                                )}

                                {loadingUsers ? (
                                    <div className="text-center py-8">
                                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                                        <p className="mt-4 text-gray-600">„É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„ÇíË™≠„ÅøËæº„Åø‰∏≠...</p>
                                    </div>
                                ) : (
                                    <div className="overflow-x-auto">
                                        <table className="min-w-full divide-y divide-gray-200">
                                            <thead className="bg-gray-50">
                                                <tr>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ÂèóÈ®ìÁï™Âè∑
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ÂêçÂâç
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        „É≠„Ç∞„Ç§„É≥ID
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ÈõªË©±Áï™Âè∑
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        „É≠„Éº„É´
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ‰ΩúÊàêÊó•ÊôÇ
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        Êõ¥Êñ∞Êó•ÊôÇ
                                                    </th>
                                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                        ÂâäÈô§
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody className="bg-white divide-y divide-gray-200">
                                                {filteredAndSortedUsers().map((user) => (
                                                    <tr key={user.id}>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                            {user.exam_no}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {user.name}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {user.email}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {user.phone_last4}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            {user.role}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {new Date(user.created_at).toLocaleDateString()}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                            {new Date(user.updated_at).toLocaleDateString()}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                            <button
                                                                onClick={() => deleteUser(user.exam_no)}
                                                                className="text-red-600 hover:text-red-900"
                                                                title="ÂâäÈô§"
                                                            >
                                                                <TrashIcon className="h-5 w-5" />
                                                            </button>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                )}
                            </div>
                        </div>
                    ) : (
                        <ActiveComponent />
                    )}
                </div>
            </div>

            {/* ÂÄã‰∫∫ÁµêÊûúÁ∑®ÈõÜ„É¢„Éº„ÉÄ„É´ */}
            {isEditModalOpen && editingResult && (
                <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                <div className="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
                    <div className="mt-3">
                        <div className="flex items-center justify-between mb-4">
                            <h3 className="text-lg font-semibold text-gray-900">ÂÄã‰∫∫ÁµêÊûúÁ∑®ÈõÜ</h3>
                            <button
                                onClick={closeEditModal}
                                className="text-gray-400 hover:text-gray-600"
                            >
                                <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>

                        <div className="space-y-4 max-h-96 overflow-y-auto">
                            {/* Âü∫Êú¨ÊÉÖÂ†± */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Â≠¶ÁîüID</label>
                                    <input
                                        type="text"
                                        value={editingResult.student_id || ''}
                                        onChange={(e) => handleEditChange('student_id', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÂèóÈ®ìÁï™Âè∑</label>
                                    <input
                                        type="text"
                                        value={editingResult.exam_no || ''}
                                        onChange={(e) => handleEditChange('exam_no', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Ê∞èÂêç</label>
                                    <input
                                        type="text"
                                        value={editingResult.name || ''}
                                        onChange={(e) => handleEditChange('name', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÊÄßÂà•</label>
                                    <select
                                        value={editingResult.gender || ''}
                                        onChange={(e) => handleEditChange('gender', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    >
                                        <option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
                                        <option value="Áî∑">Áî∑</option>
                                        <option value="Â•≥">Â•≥</option>
                                    </select>
                                </div>
                            </div>

                            {/* Âá∫È°òÊÉÖÂ†± */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Âá∫È°òÁ®ÆÂà•</label>
                                    <select
                                        value={editingResult.application_type || ''}
                                        onChange={(e) => handleEditChange('application_type', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    >
                                        <option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
                                        <option value="Â∞ÇÈ°ò">Â∞ÇÈ°ò</option>
                                        <option value="‰ΩµÈ°ò">‰ΩµÈ°ò</option>
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Âá∫È°òÊôÇ„Ç≥„Éº„Çπ</label>
                                    <input
                                        type="text"
                                        value={editingResult.application_course || ''}
                                        onChange={(e) => handleEditChange('application_course', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÂêàÊ†º„Ç≥„Éº„Çπ</label>
                                    <input
                                        type="text"
                                        value={editingResult.accepted_course || ''}
                                        onChange={(e) => handleEditChange('accepted_course', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">‰∏≠Â≠¶Ê†°Âêç</label>
                                    <input
                                        type="text"
                                        value={editingResult.middle_school || ''}
                                        onChange={(e) => handleEditChange('middle_school', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                            </div>

                            {/* Êé®Ëñ¶„ÉªÁâπÂÖ∏ÊÉÖÂ†± */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Êé®Ëñ¶</label>
                                    <input
                                        type="text"
                                        value={editingResult.recommendation || ''}
                                        onChange={(e) => handleEditChange('recommendation', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÁâπÂæÖÁîü</label>
                                    <input
                                        type="text"
                                        value={editingResult.scholarship_student || ''}
                                        onChange={(e) => handleEditChange('scholarship_student', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">3ÊïôÁßë‰∏ä‰Ωç10%</label>
                                    <input
                                        type="text"
                                        value={editingResult.top_10_percent || ''}
                                        onChange={(e) => handleEditChange('top_10_percent', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÁâπÈÄ≤‰∏ä‰Ωç5Âêç</label>
                                    <input
                                        type="text"
                                        value={editingResult.special_advance_top5 || ''}
                                        onChange={(e) => handleEditChange('special_advance_top5', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÈÄ≤Â≠¶‰∏ä‰Ωç5Âêç</label>
                                    <input
                                        type="text"
                                        value={editingResult.advance_top5 || ''}
                                        onChange={(e) => handleEditChange('advance_top5', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÈÉ®Ê¥ªÂãïÊé®Ëñ¶Ë°®Ë®ò</label>
                                    <input
                                        type="text"
                                        value={editingResult.club_recommendation || ''}
                                        onChange={(e) => handleEditChange('club_recommendation', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                            </div>

                            {/* ÈÉ®Ê¥ªÂãïÊé®Ëñ¶ÂÖçÈô§ÊÉÖÂ†± */}
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÈÉ®Ê¥ªÂãïÊé®Ëñ¶ÂÖ•Â≠¶ÈáëÂÖçÈô§</label>
                                    <input
                                        type="text"
                                        value={editingResult.club_tuition_exemption || ''}
                                        onChange={(e) => handleEditChange('club_tuition_exemption', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÈÉ®Ê¥ªÂãïÊé®Ëñ¶Ë´∏Ë≤ªÁî®ÂÖçÈô§</label>
                                    <input
                                        type="text"
                                        value={editingResult.club_fee_exemption || ''}
                                        onChange={(e) => handleEditChange('club_fee_exemption', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">ÈÉ®Ê¥ªÂãïÊé®Ëñ¶Â•®Â≠¶ÈáëÊîØÁµ¶</label>
                                    <input
                                        type="text"
                                        value={editingResult.club_scholarship || ''}
                                        onChange={(e) => handleEditChange('club_scholarship', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
                            </div>
                        </div>

                        <div className="flex justify-end space-x-3 mt-6">
                            <button
                                onClick={closeEditModal}
                                className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                            >
                                „Ç≠„É£„É≥„Çª„É´
                            </button>
                            <button
                                onClick={handleEditSubmit}
                                disabled={editLoading}
                                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                            >
                                {editLoading ? 'Êõ¥Êñ∞‰∏≠...' : 'Êõ¥Êñ∞'}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        )}
        </div>
    );
};

export default AdminDashboard;
